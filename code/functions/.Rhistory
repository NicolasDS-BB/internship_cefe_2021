clear
clean
'''#écriture du fichier
write_file(log_path, bdd, weight, metric, df_metrics, df_reglog, df_scope, layers, k) '''
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
clear
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'imagenet'
metric <- 'L0'
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'imagenet'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
install.packages("rjson")
library("rjson")
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
#chargement des données
df_metrics <- fromJSON(file = log_path+'_'+bdd+'_'+weight+'_'+metric+'_'+'_BRUTMETRICS'+'.csv')
library("rjson")
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
#chargement des données
df_metrics <- fromJSON(paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""))
library("rjson")
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
#chargement des données
df_metrics <- fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""))
library("rjson")
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
getwd()
#chargement des données
#df_metrics <- fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""))
library("rjson")
setwd(home/renoult/Bureau/internship_cefe_2021/code/functions)
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
getwd()
#chargement des données
#df_metrics <- fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""))
setwd(home/renoult/Bureau/internship_cefe_2021/code/functions)
setwd(/home/renoult/Bureau/internship_cefe_2021/code/functions)
setwd("home/renoult/Bureau/internship_cefe_2021/code/functions")
setwd("home/renoult/Bureau/internship_cefe_2021/code/functions")
setwd("home/renoult/Bureau/internship_cefe_2021/code/functions")
#####################################################################################
# DESCRIPTION:
#####################################################################################
#####################################################################################
# LIBRAIRIES:
#####################################################################################
library("rjson")
#####################################################################################
# PARAMETRES:
#####################################################################################
#mettre ça pas en dur a terme
setwd("/home/renoult/Bureau/internship_cefe_2021/code/functions")
#def analyse_metrics(model_name, bdd, weight, metric,k):
#passer ces variables en paramètres,elles sont là juste pour être testées:
model_name <- 'VGG16'
bdd <- 'SCUT-FBP'
weight <- 'imagenet'
metric <- 'kurtosis'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats et chargement des données
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
df_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
df_metrics <- read.csv(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""))
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
df_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
df_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
}
#####################################################################################
# 1. DESCRIPTION:
#####################################################################################
#####################################################################################
# 2. LIBRAIRIES:
#####################################################################################
library("rjson")
#####################################################################################
# 3. PARAMETRES: def analyse_metrics(model_name, bdd, weight, metric,k):
#####################################################################################
#mettre ça pas en dur a terme mais en paramètres passéa
setwd("/home/renoult/Bureau/internship_cefe_2021/code/functions")
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats et chargement des données
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
df_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
#####################################################################################
# 4. ANALYSE:
#####################################################################################
#####################################################################################
# 4.1 Logistic regression:
#####################################################################################
print(min(df_metrics))
print(min(flatten(df_metrics))
)
install.packages("jsonlite")
print(min(flatten(df_metrics)))
print(min(flatten(df_metrics)))
library(jsonlite)
print(min(flatten(df_metrics)))
install.packages("ramify")
library("ramify")
print(min(flatten(df_metrics)))
printflatten(df_metrics))
print(flatten(df_metrics))
View(df_metrics)
matrix_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
detach("package:jsonlite", unload = TRUE)
matrix_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
df_metrics <- as.data.frame(matrix_metrics)
View(df_metrics)
print(flatten(df_metrics))
print(min(flatten(df_metrics)))
subset_df_metrics = subset(df_metrics, select = layers)
View(subset_df_metrics)
print(min(flatten(subset_df_metrics)))
subset_df_metrics = sapply(subset_df_metrics, as.numeric)
View(subset_df_metrics)
print(min(flatten(subset_df_metrics)))
View(df_metrics)
install.packages("purrr")
library("purrr")
detach("package:ramify", unload = TRUE)
vmin = min(flatten(df_metrics[,-1]))
#####################################################################################
# 1. DESCRIPTION:
#####################################################################################
#####################################################################################
# 2. LIBRAIRIES:
#####################################################################################
library("rjson")
library("purrr")
#####################################################################################
# 3. PARAMETRES: def analyse_metrics(model_name, bdd, weight, metric,k):
#####################################################################################
#mettre ça pas en dur a terme mais en paramètres passéa
setwd("/home/renoult/Bureau/internship_cefe_2021/code/functions")
model_name <- 'VGG16'
bdd <- 'CFD'
weight <- 'vggface'
metric <- 'L0'
#récupération du nom des couches en fonction du nom du modèle
if (model_name == 'VGG16'){
if (weight == 'imagenet'){
layers = c('input_1','block1_conv1','block1_conv2','block1_pool','block2_conv1', 'block2_conv2','block2_pool',
'block3_conv1','block3_conv2','block3_conv3','block3_pool','block4_conv1','block4_conv2','block4_conv3',
'block4_pool', 'block5_conv1','block5_conv2','block5_conv3','block5_pool','flatten','fc1', 'fc2')}
else if (weight == 'vggface'){
layers = c('input_1','conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2','conv3_3',
'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5','flatten',
'fc6/relu','fc7/relu')}}
#path d'enregistrement des résultats et chargement des données
if (bdd == 'CFD'){
labels_path ='../../data/redesigned/CFD/labels_CFD.csv'
log_path ='../../results/CFD/log_'
}else if (bdd == 'JEN'){
labels_path ='../../data/redesigned/JEN/labels_JEN.csv'
log_path ='../../results/JEN/log_'
}else if (bdd == 'SCUT-FBP'){
labels_path ='../../data/redesigned/SCUT-FBP/labels_SCUT_FBP.csv'
log_path ='../../results/SCUT-FBP/log_'
}else if (bdd == 'MART'){
labels_path ='../../data/redesigned/MART/labels_MART.csv'
log_path ='../../results/MART/log_'
}else if (bdd == 'SMALLTEST'){
labels_path ='../../data/redesigned/small_test/labels_test.csv'
log_path ='../../results/smalltest/log_'
}else if (bdd == 'BIGTEST'){
labels_path ='../../data/redesigned/big_test/labels_bigtest.csv'
log_path ='../../results/bigtest/log_'
}
matrix_metrics <- do.call(cbind, fromJSON(file = paste(log_path,'_',bdd,'_',weight,'_',metric,'_','_BRUTMETRICS','.csv',sep=""),simplify = FALSE))
df_metrics <- as.data.frame(matrix_metrics)
df_metrics = sapply(df_metrics, as.numeric)
#####################################################################################
# 4. ANALYSE:
#####################################################################################
#####################################################################################
# 4.1 Logistic regression:
#####################################################################################
View(df_metrics)
vmin = min(flatten(df_metrics[,-1]))
if (metric %in% c('kurtosis','L0')){
vmin = min(tolist(flatten(df_metrics[,-1])))
vmax = max(flatten(df_metrics[,-1]))
df_metrics[,-1]= df_metrics[,-1] - vmin
}
if (metric %in% c('kurtosis','L0')){
vmin = min(as.list(flatten(df_metrics[,-1])))
vmax = max(as.list(flatten(df_metrics[,-1])))
df_metrics[,-1]= df_metrics[,-1] - vmin
}
vmin = min(as.list(flatten(df_metrics[,-1])))
rlang::last_error()
detach("package:purrr", unload = TRUE)
vmin = min(as.list(flatten(df_metrics[,-1])))
library(purrr)
vmin = min(as.list(flatten(df_metrics[,-1])))
rlang::last_error()
flatten(df_metrics[,-1])
df_metrics <- as.data.frame(matrix_metrics)
flatten(df_metrics[,-1])
vmin = min(as.list(flatten(df_metrics[,-1])))
df_metrics <- as.data.frame(matrix_metrics)
flatten_df_metrics = flatten(df_metrics[,-1])
vmin = min(as.list(flatten_df_metrics))
vmin = min(flatten_df_metrics)
df_metrics <- as.data.frame(matrix_metrics)
flatten_df_metrics = flatten(df_metrics[,-1])
vmin = min(flatten_df_metrics)
df_metrics <- as.data.frame(matrix_metrics)
flatten_df_metrics = flatten(df_metrics[,-1])
vmin = min(as.vector(flatten_df_metrics))
as.vector(flatten_df_metrics)
vec = as.vector(flatten_df_metrics)
vmin = min(vec)
